#include <algorithm>
#include <numeric>
#include <vector>
#include <functional>
#include <fmt/core.h>

auto my_adjacent_find(auto f, auto l, auto comp) {
    return std::mismatch(f, std::prev(l), std::next(f), std::not_fn(comp)).first;
}

auto my_is_partitioned(auto f, auto l, auto p) {
    return std::is_sorted(f, l, [&](auto a, auto b) {
        return p(b) < p(a);
    });
}

auto my_partition_point(auto f, auto l, auto p) {
    return std::find_if(f, l, std::not_fn(p));
}

auto my_lower_bound(auto f, auto l, auto val) {
    return std::partition_point(f, l, [&](auto e) {
        return e < val;
        });
}

/* auto my_lower_bound(auto f, auto l, auto val) { */
/*     return std::equal_range(f, l, val).first; */
/* } */

auto my_upper_bound(auto f, auto l, auto val) {
    return std::partition_point(f, l, [&](auto e) {
        return e <= val;
        });
}

/* auto my_upper_bound(auto f, auto l, auto val) { */
/*     return std::equal_range(f, l, val).second; */
/* } */

auto my_is_sorted_until(auto f, auto l, auto comp = std::less{}) {
    return std::adjacent_find(f, l, std::not_fn(comp));
}

auto my_is_sorted(auto f, auto l, auto comp = std::less{}) {
    return std::is_sorted_until(f, l, comp) == l;
}

auto my_equal(auto f, auto l, auto f2) {
    return std::mismatch(f, l, f2, std::equal_to{}).first == l;
}

auto my_find_if(auto f, auto l, auto p) {
    return std::mismatch(f, l, f, [&](auto a, auto b) {
        return !p(a);
    }).first;
}

auto my_any_of(auto f, auto l, auto p) {
    return std::find_if(f, l, p) != l;
}

auto my_all_of(auto f, auto l, auto p) {
    return std::find_if(f, l, std::not_fn(p)) == l;
}

/* auto my_all_of(auto f, auto l, auto p) { */
/*     return std::accumulate(f, l, true, [&](auto a, auto b) { */
/*         return a && p(b); */
/*         }); */
/* } */

auto my_none_of(auto f, auto l, auto p) {
    return std::find_if(f, l, p) == l;
}

auto my_find(auto f, auto l, auto val) {
    return std::find_if(f, l, [&](auto e) { return e == val; });
}

// modifying
auto arr_shift_left(auto f, auto l, auto i) {
    return std::copy(f + i, l, f);
}

auto arr_shift_right(auto f, auto l, auto i) {
 std::copy_backward(f, l - i, l);
}

auto arr_replace(auto f, auto l, auto val0, auto val1) {
 std::transform(f, l, f, [&](int a) {
     return a == val0 ? val1 : a;
     });
}

auto arr_generate(auto f, auto l, auto gen) {
  std::transform(f, l, [&](int a) {
      return gen();
      });
}

extern "C" {
};


auto main() -> int {

    auto const v = std::vector{1, 1, 2, 3, 0};
    auto a = v.cbegin();
    auto b = v.cend();

    // same: 1
    fmt::print("{}\n", *my_adjacent_find(a, b, std::not_equal_to{}));
    fmt::print("{}\n", *std::adjacent_find(a, b, std::not_equal_to{}));
    __builtin_printf("\n");
    // TODO 3 vs 0
    fmt::print("{}\n", *my_is_sorted_until(a, b, std::less_equal{}));
    fmt::print("{}\n", *std::is_sorted_until(a, b));
    __builtin_printf("\n");
    // same: false
    fmt::print("{}\n", my_is_sorted(a, b, std::less_equal{}));
    fmt::print("{}\n", std::is_sorted(a, b));
    __builtin_printf("\n");
    // TODO false vs true
    fmt::print("{}\n", my_equal(a, b, a));
    fmt::print("{}\n", std::equal(a, b, a));
    __builtin_printf("\n");
    auto even = [](auto e) { return e % 2 == 0; };
    // TODO 1 vs 2
    fmt::print("{}\n", *my_find_if(a, b, even));
    fmt::print("{}\n", *std::find_if(a, b, even));
    __builtin_printf("\n");
    // same: true
    fmt::print("{}\n", my_any_of(a, b, even));
    fmt::print("{}\n", std::any_of(a, b, even));
    __builtin_printf("\n");
    // same: 3
    fmt::print("{}\n", *my_find(a, b, 3));
    fmt::print("{}\n", *std::find(a, b, 3));
}

